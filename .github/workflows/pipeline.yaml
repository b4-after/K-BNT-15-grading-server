name: Deploy AWS Lambda with SAM(Serverless Application Model)

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: AWS

    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Set up Python to use AWS SAM
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Intsall aws-sam-cli
        run: |
          python -m pip install --upgrade pip
          pip install aws-sam-cli

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to AWS ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG .
          docker push $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG"

      # - name: Build and push Docker image to ECR
      #   run: |
      #     sam build --use-container
      #     sam package --image-repository ${{ secrets.AWS_ECR_REPOSITORY }}

      # - name: Deploy to AWS Lambda
      #   run: |
      #     AWS_LAMBDA=${{ secrets.AWS_LAMBDA }}
      #     HAS_LAMBDA=true

      #     aws lambda get-function --function-name $AWS_LAMBDA || HAS_LAMBDA=false \

      #     if [ "$HAS_LAMBDA" = "false" ]; then
      #       echo "Create a new AWS Lambda."
      #       aws lambda create-function \
      #         --function-name $AWS_LAMBDA \
      #         --role ${{ secrets.AWS_LAMBDA_ROLE_ARN }} \
      #         --code ImageUri=${{ secrets.AWS_ECR_REPOSITORY }}:latest \
      #         --package-type Image \
      #         --timeout 600 \
      #         --memory-size 1024 \
      #         --kms-key-arn ${{ secrets.AWS_KMS_KEY_ARN }}

      #       echo "Create a new event source mapping for AWS SQS"
      #       aws create-event-source-mapping \
      #         --function-name $AWS_LAMBDA
      #         --event-source-arn ${{ secrets.AWS_SQS_QUEUE_ARN }}
      #         --enabled

      #     else
      #       echo "Update the AWS Lambda."
      #       aws lambda update-function-code \
      #         --function-name $AWS_LAMBDA \
      #         --image-uri ${{ secrets.AWS_ECR_REPOSITORY }}:latest

      #     fi
